pipeline {
    agent { label 'weatherApp-agent' }

    environment {
        DOCKER_IMAGE = 'amitor2002/weatherapp:latest'
        CONTAINER_NAME = 'weatherapp'
        APP_HOST = '172.31.29.27'
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }


        stage('Lint Check') {
            steps {
                sh '''
                    docker --version
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install pylint
                    pylint app.py --fail-under=5
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $CONTAINER_NAME:latest .'
            }
        }

        stage('Deploy Locally for Testing') {
            steps {
                sh '''
                    docker stop $CONTAINER_NAME || true
                    docker rm $CONTAINER_NAME || true

                    docker run -d -p 5000:5000 --name $CONTAINER_NAME $CONTAINER_NAME:latest || {
                        echo "‚ùó Port 5000 might already be in use. Showing usage:"
                        if command -v lsof > /dev/null; then
                            lsof -i :5000 || echo "‚ö†Ô∏è Could not check port usage (lsof not available)"
                        fi
                    }

                    
                    echo "‚è≥ Waiting for container to initialize..."
                    sleep 5

                    echo "üß™ Running reachability test script..."
                    python3 isreachable.py
                     
                '''
            }
        }

        stage('Push to Docker Hub') {
            when {
                branch 'main'
            }

            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker tag $CONTAINER_NAME:latest $DOCKER_IMAGE
                        docker push $DOCKER_IMAGE
                    '''
                }
            }
        }

        stage('Deploy to Remote Server') {
             when {
                branch 'main'
            }
            steps {
                 sshagent(credentials: ['gitlab-instance-key.pem']) {
                     sh '''
                        ssh -o StrictHostKeyChecking=no ubuntu@172.31.22.142 << 'ENDSSH'
                        echo "üîç Navigating to application directory..."
                        cd /home/ubuntu/weatherApp/

                        echo "üîç Stopping and removing existing containers..."
                        docker compose down

                        echo "‚¨áÔ∏è Pulling latest image..."
                        docker compose pull

                        echo "üöÄ Starting application with Docker Compose..."
                        docker compose up -d --force-recreate
ENDSSH
            '''
            }
        }
    }

        stage('Verify Remote Deployment') {
            when {
                branch 'main'
            }

            steps {
                sshagent(credentials: ['gitlab-instance-key.pem']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no ubuntu@172.31.22.142 << 'ENDSSH'
                            echo "üßê Checking if weatherapp is running..."
                            sudo docker ps -a

                            echo "üì° Sending request to http://localhost:5000..."
                            sleep 5
                            curl -I http://localhost:5000 || echo "‚ö†Ô∏è App is not responding as expected."
ENDSSH
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'

            sh '''
            echo "üßπ Cleaning local Docker resources..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            docker rmi $CONTAINER_NAME:latest || true
            docker container prune -f
            docker image prune -af
            docker volume prune -f
            docker network prune -f

            echo "üßπ Cleaning Jenkins workspace and cache..."

            # Use Jenkins' built-in WORKSPACE environment variable safely
            rm -rf "$WORKSPACE"/* || true
            find "$WORKSPACE" -type f -name ".*" -delete || true  # Delete hidden files
            find "$WORKSPACE" -type d -name ".*" -exec rm -rf {} + || true

            # Clean the user's cache
            rm -rf ~/.cache/* || true

            # Clean Jenkins agent logs if exist
            [ -d ~/agent/remoting/logs ] && rm -f ~/agent/remoting/logs/* || true

            echo "‚úÖ Workspace and cache cleaned successfully!"
            '''
        }
        success {
            slackSend (
                channel: '#all-amitor2002',
                color: 'good',
                message: "‚úÖ Build #${env.BUILD_NUMBER} of branch ${env.BRANCH_NAME} succeeded in ${env.JOB_NAME}"
            )

            echo '‚úÖ Pipeline executed successfully.'
        }
        failure {
            slackSend (
                channel: '#all-amitor2002',
                color: 'danger',
                message: "‚ùå Build #${env.BUILD_NUMBER} of branch ${env.BRANCH_NAME} failed in ${env.JOB_NAME}"
            )
            echo '‚ùå Pipeline failed. Please check the logs for details.'
        }
    }
}

